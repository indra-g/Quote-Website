{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.jsx"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","value","current","trim","length","commentData","text","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","onClick","HighlightedQuote","quote","author","QuoteDetail","getSingleQuote","loadedQuote","match","useRouteMatch","path","exact","url"],"mappings":"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","file":"static/js/4.8edf3011.chunk.js","sourcesContent":["import classes from \"./NoQuotesFound.module.css\";\nimport { Link } from \"react-router-dom\";\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/newQuote\" className=\"btn\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\nimport { addComment } from \"../../libs/api\";\nimport useHttp from \"../../hooks/use-http\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (!error && status === \"completed\") {\n      onAddedComment();\n    }\n  }, [error, onAddedComment, status]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const { value } = commentTextRef.current;\n    if (value.trim().length !== 0) {\n      sendRequest({ commentData: { text: value }, quoteId: props.quoteId });\n    }\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <LoadingSpinner />}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getAllComments } from \"../../libs/api\";\nimport useHttp from \"../../hooks/use-http\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport CommentsList from \"./CommentsList\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { quoteId } = params;\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (\n    status === \"completed\" &&\n    !loadedComments &&\n    loadedComments.length === 0\n  ) {\n    comments = <p className=\"centered\">No Comments were added yet</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\nimport { getSingleQuote } from \"../libs/api\";\nimport useHttp from \"../hooks/use-http\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport Comments from \"../components/comments/Comments\";\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\n\nconst QuoteDetail = () => {\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  const match = useRouteMatch();\n  const params = useParams();\n  const { quoteId } = params;\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n  if (error) {\n    return <p className=\"centered focused\">{error}</p>;\n  }\n  if (status === \"completed\" && (!loadedQuote || loadedQuote.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  return (\n    <>\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Route path={match.path} exact>\n        <div className=\"centered\">\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\n            Load Comments\n          </Link>\n        </div>\n      </Route>\n      <Route path={`${match.path}/comments`}>\n        <Comments />\n      </Route>\n    </>\n  );\n};\nexport default QuoteDetail;\n"],"sourceRoot":""}